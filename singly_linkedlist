#include<stdio.h>
#include<malloc.h>
struct slist
{
int data;
struct slist *next;
};
typedef struct slist node;
node* create(node *first)
{
node *new,*prev;
int x;
printf("enter data");
scanf("%d",&x);
while(x!=-1)
{
new=(node*)malloc(sizeof(node));
new->data=x;
new->next=NULL;
if(first==NULL)
{
first=new;
prev=new;
}
else
{
prev->next=new;
prev=new;

}
printf("enter data");
scanf("%d",&x);
}
return first;
}
void display(node *first)
{
    node *temp=first;
    if(first==NULL)
    {
        printf("no list to print");
    }
    else{
        while(temp!=NULL)
        {
            printf("|%d|->",temp->data);
            temp=temp->next;
        }
        printf("NULL");
    }
}
void search(node *first,int x)
{
    node *temp=first;
    int flag=0;
    while(temp!=NULL)
    {
        if(temp->data==x)
        {
            flag=1;
            break;
        }
        else
        {
            temp=temp->next;
        }

    }
    if(flag==1)
    {
        printf("element found");
    }
    else{
        printf("element not found");
    }
}
int count(node *first)
{
    int c=0;
    node *temp=first;
    while(temp!=NULL)
    {
        c++;
        temp=temp->next;
    }
    return c;
}
node* insert_at_begin(node *first,int x)
{
    node *new=(node*)malloc(sizeof(node));
    new->data=x;
    new->next=NULL;
    if(first==NULL)
    {
        first=new;
    }
    else
    {
        new->next=first;
        first=new;
    }
    return first;
}
node* insert_at_end(node *first,int x)
{
    node *temp=first;
    node *new=(node*)malloc(sizeof(node));
    new->data=x;
    new->next=NULL;
    if(first==NULL)
    {
        first=new;
    }
    else
    {
        while(temp->next!=NULL)
        {
            temp=temp->next;
        }
        temp->next=new;
    }
    return first;
}
node* insert_at_pos(node* first,int pos,int x)
{
    node *temp=first,*new;
    int i,n;
    n=count(first);
    if(pos>1&&pos<n)
    {
        new=(node*)malloc(sizeof(node));
        new->data=x;
        new->next=NULL;
        for(i=1;i<pos-1;i++)
        {
            temp=temp->next;
        }
        new->next=temp->next;
        temp->next=new;

    }
    return first;
}
node* delete(node *first,int x)
{
    node *temp1,*temp;
    int flag=0;
    temp=first;
    if(first->data==x)
    {
        first=first->next;
        free(temp);
    }
    else
    {
        temp1=first;
        temp=first->next;
        while(temp!=NULL)
        {
            if(temp->data==x)
            {
                flag=1;
                break;
            }
            else
            {
                temp1=temp;
                temp=temp->next;
            }
        }
        if(flag==1)
        {
            temp1->next=temp->next;
            free(temp);
        }
        else
        {
            printf("no element to delete");
        }
    }
    return first;
}
node* sort(node *first)
{
    node *temp1,*temp2;
    int x;
    for(temp1=first;temp1->next!=NULL;temp1=temp1->next)
    {
        for(temp2=temp1->next;temp2!=NULL;temp2=temp2->next)
        {
            if(temp1->data>temp2->data)
            {
                x=temp1->data;
                temp1->data=temp2->data;
                temp2->data=x;

            }
        }
    }
    return first;
}
node *reverse(node *first)
{
    node *present=first,*prev=NULL,*save;
    while(present!=NULL)
    {
        save=present->next;
        present->next=prev;
        prev=present;
        present=save;
    }
    return prev;
}
void main()
{
    int choice,c,i,d,s,pos;
    node *head=NULL;
    while(1)
    {
        printf("1.create\n2.display\n3.count\n4.search\n5.insert at begin\n6.insert at end\n7.insert at position\n8.deletion");
        printf("\n9.sort\n10.reverse\n11.quit");
        printf("\nenter your choice");
        scanf("%d",&choice);
        switch(choice)
        {
            case 1: head=create(head);
                    break;
            case 2: printf("list elements are");
                    display(head);
                    break;
            case 3: c=count(head);
                    printf("\n number of elements in the linked list are %d",c);
                    break;
            case 4: printf("enter element to search");
                    scanf("%d",&s);
                    search(head,s);
                    break;
            case 5: printf("enter element to insert");
                    scanf("%d",&i);
                    head=insert_at_begin(head,i);
                    break;
            case 6: printf("enter element to insert");
                    scanf("%d",&i);
                    head=insert_at_end(head,i);
                    break;
            case 7: printf("enter element to insert");
                    scanf("%d",&i);
                    printf("enter position");
                    scanf("%d",&pos);
                    head=insert_at_pos(head,pos,i);
                    break;
            case 8: printf("enter element to delete");
                    scanf("%d",&d);
                    head=delete(head,d);
                    break;
            case 9: printf("elements after sorting\n");
                    head=sort(head);
                    break;
            case 10:printf("elements after reversing");
                    head=reverse(head);
                    break;
            case 11:exit(0);
        }
    }

}
