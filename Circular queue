#include<stdio.h>
#include<stdlib.h>
#define MAX 5
int a[MAX],front=-1,rear=-1;
void enqueue(int x)
{
    if((front==0&&rear==MAX-1)||(front==rear+1))
    {
        printf("queue overflow");
    }
    else
    {
        if(front==-1)
        {
            front=0;
            rear=0;
        }
        else if(rear==MAX-1)
        {
            rear=0;
        }
        else
        {
            ++rear;
        }
        a[rear]=x;
    }
}
void display()
{
    int i;
    if(front==-1)
    {
        printf("no elements in queue");
    }
    else if(front<=rear)
    {
       for(i=front;i<=rear;i++)
       {
           printf("%d\t",a[i]);
       }
    }
    else
    {
        for(i=front;i<=MAX-1;i++)
        {
            printf("%d\t",a[i]);
        }
        for(i=0;i<=rear;i++)
        {
            printf("%d\t",a[i]);
        }
    }
    printf("\n");
}
int dequeue()
{
    int x;
    if(front==-1)
    {
        return -1;
    }
    else
    {
        x=a[front];
        {
            if(front==rear)
            {
                front=-1;
                rear=-1;
            }
            else if(front==MAX-1)
            {
                front=0;
            }
            else
            {
                ++front;
            }
        }
        return x;
        
    }
}
void main()
{
    int ch,x,d;
    while(1)
    {
        printf("1.enqueue\n2.dequeue\n3.display\n4.quit\n");
        printf("enter your choice\n");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1:printf("enter element to enqueue\n");
                   scanf("%d",&x);
                   enqueue(x);
                   break;
            case 2:d=dequeue();
                   if(d==-1)
                   {
                       printf("queue underflow");
                   }
                   else
                   {
                       printf("%d is deleted",d);
                   }
                   break;
            case 3:printf("elements in queue are");
                   display();
                   break;
            case 4:exit(0);
        }
    }
}
