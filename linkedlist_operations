#include<stdio.h>
#include<malloc.h>
#include<stdlib.h>
struct slist
{
    int data;
    struct slist *next;
};
typedef struct slist node;
node* create(node *first)
{
    node *new,*prev;
    int x;
    printf("enter data,enter -1 to stop");
    scanf("%d",&x);
    while(x!=-1)
    {
        new=(node*)malloc(sizeof(node));
        new->data=x;
        new->next=NULL;
        if(first==NULL)
        {
            first=new;
            prev=new;
        }
        else
        {
            prev->next=new;
            prev=new;
        }
        printf("enter data enter -1 to stop");
        scanf("%d",&x);
    }
    return first;
}
void display(node *first)
{
    node *temp=first;
    if(first==NULL)
    {
        printf("no list to display");
    }
    else
    {
        while(temp!=NULL)
        {
            printf("|%d|->",temp->data);
            temp=temp->next;
        }
        printf("NULL");
    }
    printf("\n");
}
node* concatenate(node *l1,node *l2)
{
    node *temp;
    if(l1==NULL)
    {
        return l2;
    }
    else if(l2==NULL)
    {
        return l1;
    }
    else
    {
        temp=l1;
        while(temp->next!=NULL)
        {
            temp=temp->next;
        }
        temp->next=l2;
    }
    return l1;
}
node *addnode(node *l3,node *new)
{
    node *temp;
    if(l3==NULL)
    {
        l3=new;
    }
    else
    {
        temp=l3;
        while(temp->next!=NULL)
        {
            temp=temp->next;
        }
        temp->next=new;
    }
    return l3;
}
node* merge(node *l1,node *l2)
{
    node *l3=NULL,*new;
    while(l1!=NULL&&l2!=NULL)
    {
        if(l1->data<l2->data)
        {
            new=(node*)malloc(sizeof(node));
            new->data=l1->data;
            new->next=NULL;
            l3=addnode(l3,new);
            l1=l1->next;
        }
       else if(l2->data<l1->data)
        {
            new=(node*)malloc(sizeof(node));
            new->data=l2->data;
            new->next=NULL;
            l3=addnode(l3,new);
            l2=l2->next;
        }
        else
        {
            new=(node*)malloc(sizeof(node));
           new->data=l1->data;
           new->next=NULL;
           l3=addnode(l3,new);
           new=(node*)malloc(sizeof(node));
           new->data=l1->data;
           new->next=NULL;
           l3=addnode(l3,new);
           l1=l1->next;
           l2=l2->next;
        }
    }
    if(l1==NULL&&l2!=NULL)
    {
        while(l2!=NULL)
        {
            new=(node*)malloc(sizeof(node));
            new->data=l2->data;
            new->next=NULL;
            l3=addnode(l3,new);
            l2=l2->next;
        }
    }
    if(l2==NULL&&l1!=NULL)
    {
        while(l1!=NULL)
        {
            new=(node*)malloc(sizeof(node));
            new->data=l1->data;
            new->next=NULL;
            l3=addnode(l3,new);
            l1=l1->next;
        }
    }
    return l3;
}
node* listunion(node *l1,node *l2)
{
    node *l3=NULL,*new;
    while(l1!=NULL&&l2!=NULL)
    {
        if(l1->data<l2->data)
        {
            new=(node*)malloc(sizeof(node));
            new->data=l1->data;
            new->next=NULL;
            l3=addnode(l3,new);
            l1=l1->next;
        }
       else if(l2->data<l1->data)
        {
            new=(node*)malloc(sizeof(node));
            new->data=l2->data;
            new->next=NULL;
            l3=addnode(l3,new);
            l2=l2->next;
        }
        else
        {
            new=(node*)malloc(sizeof(node));
           new->data=l1->data;
           new->next=NULL;
           l3=addnode(l3,new);
           l1=l1->next;
           l2=l2->next;
        }
    }
    if(l1==NULL&&l2!=NULL)
    {
        while(l2!=NULL)
        {
            new=(node*)malloc(sizeof(node));
            new->data=l2->data;
            new->next=NULL;
            l3=addnode(l3,new);
            l2=l2->next;
        }
    }
    if(l2==NULL&&l1!=NULL)
    {
        while(l1!=NULL)
        {
            new=(node*)malloc(sizeof(node));
            new->data=l1->data;
            new->next=NULL;
            l3=addnode(l3,new);
            l1=l1->next;
        }
    }
    return l3;
}
node* intersection(node *l1,node *l2)
{
    node *new,*l3=NULL;
    while(l1!=NULL&&l2!=NULL)
    {
        if(l1->data<l2->data)
        {
            l1=l1->next;
        }
        else if(l2->data<l1->data)
        {
            l2=l2->next;
        }
        else{
            new=(node*)malloc(sizeof(node));
            new->data=l1->data;
            new->next=NULL;
            l3=addnode(l3,new);
            l1=l1->next;
            l2=l2->next;
        }
    }
    return l3;
}
void main()
{
    node *l1=NULL,*l2=NULL,*l3,*l4,*l5,*l6;
    int ch;
    while(1)
    {
        printf("1.create\n2.display\n3.concatenation\n4.listunion\n5.merging\n6.intersection\n7.quit\n");
        printf("enter your choice\n");
        scanf("%d",&ch);
        switch(ch)
        {
        case 1:l1=create(l1);
               l2=create(l2);
               break;
        case 2:display(l1);
               display(l2);
               break;
        case 3:l3=concatenate(l1,l2);
               printf("concatenation of two lists\n");
               display(l3);
               break;
        case 4:l4=listunion(l1,l2);
               printf("union of two lists\n");
               display(l4);
               break;
        case 5:l5=merge(l1,l2);
               printf("merging of two lists\n");
               display(l5);
               break;
        case 6:l6=intersection(l1,l2);
               printf("intersection of two lists\n");
               display(l6);
               break;
        case 7:exit(0);
        }
    }
}
